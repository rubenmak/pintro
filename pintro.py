#!/usr/bin/python__author__ = 'ruben.mak'# sudo apt-get install aircrack-ng screen tcpdump omxplayer# python3 pintro.pyimport subprocessimport timeimport datetimefrom urllib.request import urlopenfrom socket import timeoutfrom urllib.error import HTTPError, URLErrorimport jsonPRINT = FalsePLAY_MUSIC = TruePLAY_INTERVAL = datetime.timedelta(hours=12)PING_INTERVAL = datetime.timedelta(minutes=1)#load configconfig_file=open('config.json')config = json.load(config_file)mac_config = config['mac']GA_TRACKING = Falseif "google_analytics_tracking_id" in config.keys():    if config['google_analytics_tracking_id'] != '':        ga_tracking_id = config['google_analytics_tracking_id']        GA_TRACKING = Truefor mac in mac_config.keys():    mac_config[mac]["last_played"] = datetime.datetime.now() - datetime.timedelta(days=1)    mac_config[mac.lower()] = mac_config.pop(mac)pintro_area = config['pintro_area']wlan = config['wlan']max_play_time = config['max_play_time']#initializeanonymous_uids = {}def mon0_present():    p = subprocess.Popen(['ifconfig'], stdout=subprocess.PIPE,stderr=subprocess.PIPE)    out, err = p.communicate()    return 'mon0' in out.decode('utf-8')def start_mon0():    subprocess.Popen(['sudo', 'airmon-ng', 'start', wlan])    time.sleep(10)def read_tcpdump_line(line):    if PRINT:        print(line)    line = line.split(' ')    data = {        'time': line[0],        'RSSI': line[6],        'SA': line[12]    }    data['RSSI'] = float(data['RSSI'][0:(len(data['RSSI'])-3)])    data['SA'] = data['SA'][3:20]    return datadef log_ga_event(user_id, pintro_area, user_name):    if PRINT:        print(datetime.datetime.now())    url = ('http://ssl.google-analytics.com/collect?v=1&tid=' +                                    ga_tracking_id +                                    '&z=1458298514004&dh=pintro.eu&cid=' +                                    user_id +                                    '&t=event&ec='+pintro_area+'&el=Present&ea=' +                                    user_name +                                    '&ev=1')    try:        urlopen(url, timeout=1).read()    except (HTTPError, URLError) as error:        print('Data of %s not retrieved because %s\nURL: %s', user_name, error, url)    except timeout:        print('socket timed out - URL %s', url)    except Exception as e:        print(str(e))    if PRINT:        print(url)        print(datetime.datetime.now())def start_airodump(max_play_time):    while not mon0_present():        start_mon0()        time.sleep(10)    p = subprocess.Popen(['sudo tcpdump -i mon0 -e -s 256 type mgt subtype probe-req'],                         stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)    print('start')    for line in iter(p.stdout.readline, ""):        line = line.decode('utf-8')        try:            data = read_tcpdump_line(line)        except:            continue        mac = data['SA']        if mac in mac_config.keys():            print(datetime.datetime.now(), data['time'], mac, mac_config[mac]['user_name'], data['RSSI'])            if GA_TRACKING:                log_ga_event(mac, pintro_area, mac_config[mac]['user_name'])            if PLAY_MUSIC and mac_config[mac]['last_played'] < \                            datetime.datetime.now() - PLAY_INTERVAL and \                    mac_config[mac]['mp3_name'] != '':                is_birthday = False                if is_birthday:                    music_player = subprocess.Popen(['omxplayer', '-o', 'local', 'birthday.mp3'],                                                     stdin=subprocess.PIPE, stdout=subprocess.PIPE)                else:                    music_player = subprocess.Popen(['omxplayer', '-o', 'local', mac_config[mac]['mp3_name']],                                                   stdin=subprocess.PIPE, stdout=subprocess.PIPE)                    pass                time.sleep(max_play_time)                try:                    music_player.stdin.write(b'q')                    music_player.stdin.flush()                except:                    pass                mac_config[mac]['last_played'] = datetime.datetime.now()        elif GA_TRACKING and mac not in anonymous_uids.keys():            anonymous_uids[mac] = datetime.datetime.now()            log_ga_event(str(hash(mac)), pintro_area, str(hash(mac)))        elif GA_TRACKING and anonymous_uids[mac] < datetime.datetime.now() - PING_INTERVAL:            anonymous_uids[mac] = datetime.datetime.now()            log_ga_event(str(hash(mac)), pintro_area, str(hash(mac)))    p.kill()start_airodump(max_play_time)